-- [ Services ]
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:FindFirstChild("Humanoid")

-- [ Settings ]
local KillAura_Enabled = false
local KillAura_TargetPlayers = false
local KillAura_TargetMobs = false

local KillAura_AutoSkill1 = "None"
local KillAura_AutoSkillLast1 = 0
local KillAura_AutoSkill2 = "None"
local KillAura_AutoSkillLast2 = 0
local KillAura_AutoSkill3 = "None"
local KillAura_AutoSkillLast3 = 0

-- [ Anti Cheat ]
local mt = getrawmetatable(game)

local oldindex = mt.__index
setreadonly(mt, false)
mt.__index = newcclosure(function(self, method)

if method == 'WalkSpeed' then
   return 16
end

if method == 'JumpPower' then
   return 50
end

return oldindex(self, method)
end)
setreadonly(mt, true)

-- [ UI Library ]
local UILibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/zxciaz/VenyxUI/main/Reuploaded"))()
local venyx = UILibrary.new("TetreX - Ancried Beta 0.01", 5013109572)

local themes = {
    Background = Color3.fromRGB(24, 24, 24),
    Glow = Color3.fromRGB(0, 0, 0),
    Accent = Color3.fromRGB(10, 10, 10),
    LightContrast = Color3.fromRGB(20, 20, 20),
    DarkContrast = Color3.fromRGB(14, 14, 14),  
    TextColor = Color3.fromRGB(255, 255, 255)
}

local CombatPage = venyx:addPage("Combat", 5012544693)

local KillAuraSection = CombatPage:addSection("Kill Aura")

-- [ Functions ]
function MergeTables(table1, table2)
    local mergedTable = {}

    -- Table 1'i birleştir
    for _, value in ipairs(table1) do
        table.insert(mergedTable, value)
    end

    -- Table 2'yi birleştir
    for _, value in ipairs(table2) do
        table.insert(mergedTable, value)
    end

    return mergedTable
end

local attackMultiplier = 1
local function getClosePlayers()
    if KillAura_TargetPlayers == false then return {} end
    local dist = 50
    local targets = {}
    for _, player in pairs(game.Players:GetChildren()) do
        if player ~= LocalPlayer then
            local character = player.Character
            if character then
                if character:FindFirstChild('HumanoidRootPart') and character:FindFirstChildOfClass('Humanoid').Health ~= 0 then
                    local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - character:FindFirstChild('HumanoidRootPart').Position).Magnitude
                    if mag < dist then
                        dist = mag
                        for i = 1, attackMultiplier do
                            table.insert(targets, character.HumanoidRootPart)
                        end
                    end
                end
            end
        end
    end
    return targets
end

local function getCloseMobs()
    if KillAura_TargetMobs == false then return {} end
    local dist = 50
    local mobs = {}
    for _, v in pairs(workspace.Attackable:GetChildren()) do
        if v:FindFirstChild('HumanoidRootPart') and v:FindFirstChildOfClass('Humanoid').Health ~= 0 then
            local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v:GetPivot().Position).Magnitude
            if mag < dist then
                dist = mag
                for i = 1, attackMultiplier or 1 do
                    table.insert(mobs, v.Mob)
                end
            end
        end
    end
    return mobs
end

-- [ Scripts Main ]
KillAuraSection:addToggle("Kill Aura Enabled", nil, function(value)
    KillAura_Enabled = value
    if KillAura_Enabled then
        while KillAura_Enabled do
            local HitMobs = MergeTables(getClosePlayers(), getCloseMobs())
            if #HitMobs > 0 then
                local args = {
                    [1] = "Attack",
                    [2] = HitMobs
                }
    
                if KillAura_AutoSkill1 ~= "None" and KillAura_AutoSkillLast1 + 15 < os.time() then
                    KillAura_AutoSkillLast1 = os.time()
                    args[3] = KillAura_AutoSkill1
                elseif KillAura_AutoSkill2 ~= "None" and KillAura_AutoSkillLast2 + 15 < os.time() then
                    KillAura_AutoSkillLast2 = os.time()
                    args[3] = KillAura_AutoSkill2
                elseif KillAura_AutoSkill3 ~= "None" and KillAura_AutoSkillLast3 + 15 < os.time() then
                    KillAura_AutoSkillLast3 = os.time()
                    args[3] = KillAura_AutoSkill3
                end
            
                game:GetService("ReplicatedStorage").RemoteEvents.Hit:FireServer(unpack(args))
                wait(0.1)
            end
            wait(0.1)
        end
    end
end)

KillAuraSection:addToggle("Target Players", nil, function(value)
    KillAura_TargetPlayers = value
end)

KillAuraSection:addToggle("Target Mobs", nil, function(value)
    KillAura_TargetMobs = value
end)

local SwordSkills = {
    "None",
    "Rising Strike",
    "Pierce",
    "Catastrophic Slam",
    "Rapid Fire",
    "Diagonal Strike",
    "Charging Blade"
}

KillAuraSection:addDropdown("Auto Skill 1", SwordSkills, function(newValue)
    KillAura_AutoSkill1 = newValue
end)

KillAuraSection:addDropdown("Auto Skill 2", SwordSkills, function(newValue)
    KillAura_AutoSkill2 = newValue
end)

KillAuraSection:addDropdown("Auto Skill 3", SwordSkills, function(newValue)
    KillAura_AutoSkill3 = newValue
end)

KillAuraSection:addSlider("Attack Multiplier", 1, 1, 100, function(value)
    attackMultiplier = value
end)


local PlayerPage = venyx:addPage("Player", 5012544693)

local CharacterSection = PlayerPage:addSection("Character")
CharacterSection:addSlider("Character Speed", 16, 0, 250, function(value)
    local Humanoid = Character:FindFirstChild("Humanoid")
    if Humanoid then
        Humanoid.WalkSpeed = value
    end
end)

local TeleportSection = PlayerPage:addSection("Teleport")
TeleportSection:addTextbox("To Where", "Select a position below")

local Locations = {
    [95206881] = {
        ["Spawn"] = Vector3.new(0, 10, 0),
        ["Dungeon 1"] = Vector3.new(100, 10, 30)
    }
}

local isTargetPlayer = false
local targetTeleport = nil
function getPlayersName()
    local returnTable = {}
    for index,player in pairs(Players:GetPlayers()) do
        table.insert(returnTable, player.Name)
    end
    return returnTable
end

function getLocations()
    local returnTable = {}
    if Locations[game.PlaceId] == nil or Locations[game.PlaceId] == {} then return {} end
    for locationName,locationPosition in pairs(Locations[game.PlaceId]) do
        table.insert(returnTable, locationName)
    end
    return returnTable
end

TeleportSection:addDropdown("Players", getPlayersName(), function(newValue)
    targetTeleport = newValue
    isTargetPlayer = true
    TeleportSection:updateTextbox("To Where", "To Where", newValue)
end)
Players.PlayerAdded:Connect(function(player)
    TeleportSection:updateDropdown("Players", "Players", getPlayersName())
end)
Players.PlayerRemoving:Connect(function(player)
    TeleportSection:updateDropdown("Players", "Players", getPlayersName())
end)

TeleportSection:addDropdown("Locations", getLocations(), function(newValue)
    targetTeleport = newValue
    isTargetPlayer = false
    TeleportSection:updateTextbox("To Where", "To Where", newValue)
end)

TeleportSection:addButton("Teleport", function()
    local Position
    if isTargetPlayer then
        local player = Players:FindFirstChild(targetTeleport)
        if player == nil then return end
        local character = player.Character
        if character == nil then return end
        local root = character:FindFirstChild("HumanoidRootPart")
        if root == nil then return end

        Position = root.Position
    else
        if Locations[game.PlaceId][targetTeleport] == nil then return end
        Position = Locations[game.PlaceId][targetTeleport]
    end

    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local Root = Character:FindFirstChild("HumanoidRootPart")
    if Root == nil then return end
    
    local setPositionPart = Instance.new("Part", workspace)
    setPositionPart.Size = Vector3.new(1,1,1)
    setPositionPart.Anchored = true
    setPositionPart.CanCollide = false
    
    local AlignPosition = Instance.new("AlignPosition", setPositionPart)
    local AlignOrientation = Instance.new("AlignOrientation", setPositionPart)
    
    local Attachment = Instance.new("Attachment", setPositionPart)
    
    AlignPosition.MaxForce = math.huge
    AlignPosition.MaxVelocity = 80
    
    AlignOrientation.RigidityEnabled = true
    
    AlignPosition.Attachment0 = Root:FindFirstChildOfClass("Attachment")
    AlignPosition.Attachment1 = Attachment

    AlignOrientation.Attachment0 = Root:FindFirstChildOfClass("Attachment")
    AlignOrientation.Attachment1 = Attachment

    setPositionPart.CFrame = CFrame.new(Position) * CFrame.Angles(math.rad(90),0, 0)
    repeat print((Character:FindFirstChild("HumanoidRootPart").Position - Position).Magnitude) wait(1) 
    until (Character:FindFirstChild("HumanoidRootPart").Position - Position).Magnitude < 2
    setPositionPart:Destroy()
    Attachment:Destroy()
    Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
end)

local VirtualUser=game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
